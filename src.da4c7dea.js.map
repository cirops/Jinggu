{"version":3,"sources":["src/draw.ts","src/utils.ts","src/Player.ts","src/input.ts","src/sprites.ts","src/index.ts"],"names":[],"mappings":";AAYO,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,WAAA,QAAA,oBAAA,EAZP,IAAA,EAAA,QAAA,KAEa,EAAiB,WACvB,IAAA,IAAI,EAAI,EAAG,EAAI,EAApB,aAAkC,GAAK,GAChC,IAAA,IAAI,EAAI,EAAG,EAAI,EAApB,cAAmC,GAAK,GAC9B,EAAA,QAAA,UAAU,EAAQ,QAAA,IAAK,EAAG,IAOjC,QAAA,eAAA,EAAA,IAAM,EAAa,WA6ChB,EAAA,QAAA,UAAU,EAAO,OAAA,OAAQ,EAAO,OAAA,EAAG,EAAO,OAAA,IA7C7C,QAAA,WAAA;;ACZA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,qBAAA,EAAA,IAAM,EAAkB,SAAC,EAAY,EAAY,EAAY,GAC3D,MAAA,CACL,EAAG,KAAK,MAAM,EAAK,IAAM,KAAK,MAAM,EAAK,IACzC,EAAG,KAAK,MAAM,EAAK,IAAM,KAAK,MAAM,EAAK,MAHtC,QAAA,gBAAA;;ACWP,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,OAAA,QAAA,eAAA,EAXA,IAIY,EAJZ,EAAA,QAAA,KAEA,EAAA,QAAA,WASA,QAAA,UAAA,EAPA,SAAY,GACV,EAAA,EAAA,GAAA,GAAA,KACA,EAAA,EAAA,KAAA,GAAA,OACA,EAAA,EAAA,KAAA,GAAA,OACA,EAAA,EAAA,MAAA,GAAA,QAJF,CAAY,IAAA,QAAA,UAAA,EAAS,KAOrB,IAAA,EAAA,WAsHA,OAxGE,SAAY,EAAW,GAAvB,IAAA,EAAA,KAXA,KAAA,SAAmB,EACnB,KAAA,SAAmB,EACnB,KAAA,WAAqB,EACrB,KAAA,kBAAoB,CAClB,EAAG,EACH,EAAG,GAEL,KAAA,OAAS,EAAQ,QAAA,MACjB,KAAA,MAAgB,EAChB,KAAA,MAAQ,KAAK,IAAI,IAAmB,EAAb,KAAK,MAAW,KAOvC,KAAA,KAAO,SAAC,GACF,IAAA,EAAK,QAAL,CAEI,OAAA,GACD,KAAA,EAAU,GACT,GAAW,IAAX,EAAK,EAAS,OAElB,EAAK,YAAY,KAAM,EAAG,MAE1B,MACG,KAAA,EAAU,KACT,GAAA,EAAK,IAAM,EAAgB,cAAA,GAAI,OAEnC,EAAK,YAAY,IAAK,EAAG,MAEzB,MACG,KAAA,EAAU,KACT,GAAW,IAAX,EAAK,EAAS,OAElB,EAAK,YAAY,KAAM,EAAG,MAC1B,MACG,KAAA,EAAU,MACT,GAAA,EAAK,IAAM,EAAe,aAAA,GAAI,OAElC,EAAK,YAAY,IAAK,EAAG,MAG7B,EAAK,SAAU,EAEf,WAAW,WAAO,OAAA,EAAK,SAAU,GAAQ,EAAK,SAGhD,KAAA,MAAQ,SAAC,GACH,IAAA,EAAK,UAAW,EAAK,QAArB,CAEI,OAAA,GACD,KAAA,EAAU,GACb,EAAK,OAAS,EAAQ,QAAA,MACtB,MACG,KAAA,EAAU,KACb,EAAK,OAAS,EAAQ,QAAA,MACtB,MACG,KAAA,EAAU,KACb,EAAK,OAAS,EAAQ,QAAA,MACtB,MACG,KAAA,EAAU,MACb,EAAK,OAAS,EAAQ,QAAA,MAG1B,EAAK,SAAU,EAEf,WAAW,WAAO,OAAA,EAAK,SAAU,GAAQ,MAG3C,KAAA,YAAc,SAAC,EAAqB,EAAgB,GAC5C,IAEA,EAAM,CAAC,EAAQ,QAAA,EAAa,GAAI,EAAQ,QAAA,EAAa,IACvD,EAAO,EAEL,EAAe,YAAY,WAAO,OAAA,EAAK,GAAY,EAAK,GALjD,EAKoE,GAAS,EAAK,MAAQ,GACjG,EAAe,YAAY,WAC3B,IAAS,EAAI,SACf,EAAO,GAGT,EAAK,OAAS,EAAI,GAElB,GAAQ,GACP,EAAK,MAAQ,GAEhB,WAAW,WACT,cAAc,GACd,cAAc,GAEd,EAAK,OAAS,EAAQ,QAAA,IACrB,EAAK,QAGV,KAAA,qBAAuB,SAAC,EAAW,GACjC,EAAK,kBAAoB,CAAC,EAAC,EAAE,EAAC,IAGhC,KAAA,OAAS,WACD,IAAA,GAAmB,EAAgB,EAAA,iBAAA,EAAK,kBAAkB,EAAG,EAAK,kBAAkB,EAAG,EAAK,EAAG,EAAK,GAChF,IAAvB,EAAiB,GAAkC,IAAvB,EAAiB,EAGrC,EAAiB,EAAI,EAC9B,EAAK,KAAK,EAAU,OACX,EAAiB,EAAI,EAC9B,EAAK,KAAK,EAAU,MACZ,EAAiB,EAAI,EAC7B,EAAK,KAAK,EAAU,MACZ,EAAiB,EAAI,GAC7B,EAAK,KAAK,EAAU,IATpB,EAAK,WAAY,GA1Fd,KAAA,EAAI,EACJ,KAAA,EAAI,GAhBb,GAAA,QAAA,OAAA;;ACiBO,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,cAAA,QAAA,WAAA,QAAA,iBAAA,EA5BP,IAAA,EAAA,QAAA,KACA,EAAA,QAAA,YAEM,EAAmB,GAEZ,EAAc,WACzB,OAAO,iBAAiB,UAAW,GAAe,GAClD,OAAO,iBAAiB,QAAS,GAAW,GAC5C,OAAO,iBAAiB,QAAS,GAAY,IAoBxC,QAAA,YAAA,EAjBP,IAAM,EAAY,SAAC,UACV,EAAY,EAAE,MAGV,EAAa,SAAC,GACtB,KAAK,MAAM,EAAO,OAAA,EAAE,MAAQ,KAAK,MAAM,EAAE,QAAU,KAAO,KAAK,MAAM,EAAO,OAAA,EAAE,MAAQ,KAAK,MAAM,EAAE,QAAU,KAG3G,EAAO,OAAA,YAGH,EAAA,OAAA,qBAAqB,EAAE,QAAS,EAAE,SAClC,EAAA,OAAA,WAAY,EACZ,EAAA,OAAA,WAIJ,QAAA,WAAA,EAAA,IAAM,EAAgB,SAAC,GAC5B,EAAY,EAAE,MAAO,EACjB,IAAA,EAAO,EAAE,IAET,GAAA,EAAY,QACN,OAAA,GACD,IAAA,YACI,EAAA,OAAA,MAAM,EAAU,UAAA,MACvB,MACG,IAAA,UACI,EAAA,OAAA,MAAM,EAAU,UAAA,IACvB,MACG,IAAA,aACI,EAAA,OAAA,MAAM,EAAU,UAAA,OACvB,MACG,IAAA,YACI,EAAA,OAAA,MAAM,EAAU,UAAA,WAMrB,OAAA,GACD,IAAA,SACA,EAAO,OAAA,YACD,EAAA,OAAA,WAAY,GAErB,MACG,IAAA,YACI,EAAA,OAAA,KAAK,EAAU,UAAA,MACtB,MACG,IAAA,UACI,EAAA,OAAA,KAAK,EAAU,UAAA,IACtB,MACG,IAAA,aACI,EAAA,OAAA,KAAK,EAAU,UAAA,OACtB,MACG,IAAA,YACI,EAAA,OAAA,KAAK,EAAU,UAAA,QAtCrB,QAAA,cAAA;;ACiBA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,iBAAA,EAAA,IAAA,EAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,IAAA,IAAA,EAAA,UAAA,SAAA,EAAA,GAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,KAAA,IAAA,MAAA,GAAA,EAAA,IAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,MAAA,IAAA,MAAA,GAAA,EAAA,IAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,KAAA,EAAA,EAAA,QAAA,EAAA,EAAA,MAAA,aAAA,EAAA,EAAA,IAAA,EAAA,SAAA,GAAA,EAAA,MAAA,KAAA,EAAA,GAAA,GAAA,EAAA,EAAA,MAAA,EAAA,GAAA,KAAA,WAAA,EAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,CAAA,MAAA,EAAA,KAAA,WAAA,GAAA,EAAA,EAAA,GAAA,MAAA,EAAA,GAAA,OAAA,EAAA,IAAA,KAAA,GAAA,IAAA,IAAA,OAAA,EAAA,CAAA,KAAA,EAAA,GAAA,MAAA,EAAA,GAAA,OAAA,EAAA,IAAA,mBAAA,SAAA,EAAA,OAAA,UAAA,WAAA,OAAA,OAAA,EAAA,SAAA,EAAA,GAAA,OAAA,SAAA,GAAA,OAAA,SAAA,GAAA,GAAA,EAAA,MAAA,IAAA,UAAA,mCAAA,KAAA,GAAA,IAAA,GAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,GAAA,EAAA,OAAA,EAAA,GAAA,EAAA,SAAA,EAAA,EAAA,SAAA,EAAA,KAAA,GAAA,GAAA,EAAA,SAAA,EAAA,EAAA,KAAA,EAAA,EAAA,KAAA,KAAA,OAAA,EAAA,OAAA,EAAA,EAAA,IAAA,EAAA,CAAA,EAAA,EAAA,GAAA,EAAA,QAAA,EAAA,IAAA,KAAA,EAAA,KAAA,EAAA,EAAA,EAAA,MAAA,KAAA,EAAA,OAAA,EAAA,QAAA,CAAA,MAAA,EAAA,GAAA,MAAA,GAAA,KAAA,EAAA,EAAA,QAAA,EAAA,EAAA,GAAA,EAAA,CAAA,GAAA,SAAA,KAAA,EAAA,EAAA,EAAA,IAAA,MAAA,EAAA,KAAA,MAAA,SAAA,QAAA,KAAA,GAAA,EAAA,EAAA,MAAA,OAAA,GAAA,EAAA,EAAA,OAAA,MAAA,IAAA,EAAA,IAAA,IAAA,EAAA,IAAA,CAAA,EAAA,EAAA,SAAA,GAAA,IAAA,EAAA,MAAA,GAAA,EAAA,GAAA,EAAA,IAAA,EAAA,GAAA,EAAA,IAAA,CAAA,EAAA,MAAA,EAAA,GAAA,MAAA,GAAA,IAAA,EAAA,IAAA,EAAA,MAAA,EAAA,GAAA,CAAA,EAAA,MAAA,EAAA,GAAA,EAAA,EAAA,MAAA,GAAA,GAAA,EAAA,MAAA,EAAA,GAAA,CAAA,EAAA,MAAA,EAAA,GAAA,EAAA,IAAA,KAAA,GAAA,MAAA,EAAA,IAAA,EAAA,IAAA,MAAA,EAAA,KAAA,MAAA,SAAA,EAAA,EAAA,KAAA,EAAA,GAAA,MAAA,GAAA,EAAA,CAAA,EAAA,GAAA,EAAA,EAAA,QAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,MAAA,EAAA,GAAA,MAAA,CAAA,MAAA,EAAA,GAAA,EAAA,QAAA,EAAA,MAAA,GAAA,CAAA,CAAA,EAAA,OA7CD,EAAa,SAAO,GAAU,OAAA,OAAA,OAAA,OAAA,EAAA,WA6C7B,OAAA,EAAA,KAAA,SAAA,GA5CL,MAAA,CAAA,EAAA,IAAI,QAAQ,SAAC,EAAS,GACd,IAAA,EAAM,aAAa,EAAE,OACrB,EAAS,IAAI,MACnB,EAAO,IAAM,EAEb,EAAO,OAAS,WACR,IAAA,EAAa,SAAS,cAAc,UAC1C,EAAW,MAAQ,GACnB,EAAW,OAAS,GACd,IAAA,EAAmB,EAAW,WAAW,MAE/C,EAAY,UAAU,EAAQ,EAAG,GAK5B,IAJC,IAAA,EAAQ,EAAY,aAAa,EAAG,EAAG,GAAI,IAEzC,EAAS,EAAK,KAEb,EAAI,EAAG,EAAI,EAAK,OAAQ,GAAK,EAChC,GAAgB,IAAhB,EAAK,EAAI,GAAU,CACf,IAAA,EAAI,EAAK,GACT,EAAI,EAAK,EAAI,GACb,EAAI,EAAK,EAAI,GAET,MAAN,GAAmB,IAAN,GAAiB,MAAN,IAC1B,EAAK,EAAI,GAAK,GAKpB,EAAY,aAAa,EAAO,EAAG,GAE7B,IAAA,EAAS,EAAW,UAAU,aAC9B,EAAoB,IAAI,MAC9B,EAAkB,IAAM,EAExB,EAAQ,IAGV,EAAO,QAAU,SAAC,GAChB,QAAQ,MAAM,QAAS,GAEvB,EAAO,YAIA,EAAc,WAAA,OAAA,OAAA,OAAA,OAAA,EAAA,WAApB,IAAA,EAAA,EAAA,OAAA,EAAA,KAAA,SAAA,GAAA,OAAA,EAAA,OAAA,KAAA,EAML,OAHI,EAAkC,GAChC,EAHM,CAAC,GAAI,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAGxD,IAAI,SAAO,GAAU,OAAA,OAAA,OAAA,OAAA,EAAA,WAAA,IAAA,EAAA,EAAA,OAAA,EAAA,KAAA,SAAA,GAJ3C,OAAA,EAAA,OAAA,KAAA,EAI+D,OAAd,EAAA,EAAQ,EAAA,EAAM,CAAA,EAAM,EAAW,IAJhF,KAAA,EAIgD,MAAA,CAAA,EAAC,EAAA,GAAc,EAAA,eAEpE,CAAA,EAAM,QAAQ,IAAI,IANb,KAAA,EAQL,OAFA,EAAA,OAEA,CAAA,EAAO,SARF,QAAA,YAAA;;ACAN,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,OAAA,QAAA,QAAA,QAAA,QAAA,QAAA,OAAA,QAAA,cAAA,QAAA,kBAAA,EA7CD,IAAA,EAAA,QAAA,UACA,EAAA,QAAA,WACA,EAAA,QAAA,YACA,EAAA,QAAA,aA0CC,EAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,IAAA,IAAA,EAAA,UAAA,SAAA,EAAA,GAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,KAAA,IAAA,MAAA,GAAA,EAAA,IAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,MAAA,IAAA,MAAA,GAAA,EAAA,IAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,KAAA,EAAA,EAAA,QAAA,EAAA,EAAA,MAAA,aAAA,EAAA,EAAA,IAAA,EAAA,SAAA,GAAA,EAAA,MAAA,KAAA,EAAA,GAAA,GAAA,EAAA,EAAA,MAAA,EAAA,GAAA,KAAA,WAAA,EAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,CAAA,MAAA,EAAA,KAAA,WAAA,GAAA,EAAA,EAAA,GAAA,MAAA,EAAA,GAAA,OAAA,EAAA,IAAA,KAAA,GAAA,IAAA,IAAA,OAAA,EAAA,CAAA,KAAA,EAAA,GAAA,MAAA,EAAA,GAAA,OAAA,EAAA,IAAA,mBAAA,SAAA,EAAA,OAAA,UAAA,WAAA,OAAA,OAAA,EAAA,SAAA,EAAA,GAAA,OAAA,SAAA,GAAA,OAAA,SAAA,GAAA,GAAA,EAAA,MAAA,IAAA,UAAA,mCAAA,KAAA,GAAA,IAAA,GAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,GAAA,EAAA,OAAA,EAAA,GAAA,EAAA,SAAA,EAAA,EAAA,SAAA,EAAA,KAAA,GAAA,GAAA,EAAA,SAAA,EAAA,EAAA,KAAA,EAAA,EAAA,KAAA,KAAA,OAAA,EAAA,OAAA,EAAA,EAAA,IAAA,EAAA,CAAA,EAAA,EAAA,GAAA,EAAA,QAAA,EAAA,IAAA,KAAA,EAAA,KAAA,EAAA,EAAA,EAAA,MAAA,KAAA,EAAA,OAAA,EAAA,QAAA,CAAA,MAAA,EAAA,GAAA,MAAA,GAAA,KAAA,EAAA,EAAA,QAAA,EAAA,EAAA,GAAA,EAAA,CAAA,GAAA,SAAA,KAAA,EAAA,EAAA,EAAA,IAAA,MAAA,EAAA,KAAA,MAAA,SAAA,QAAA,KAAA,GAAA,EAAA,EAAA,MAAA,OAAA,GAAA,EAAA,EAAA,OAAA,MAAA,IAAA,EAAA,IAAA,IAAA,EAAA,IAAA,CAAA,EAAA,EAAA,SAAA,GAAA,IAAA,EAAA,MAAA,GAAA,EAAA,GAAA,EAAA,IAAA,EAAA,GAAA,EAAA,IAAA,CAAA,EAAA,MAAA,EAAA,GAAA,MAAA,GAAA,IAAA,EAAA,IAAA,EAAA,MAAA,EAAA,GAAA,CAAA,EAAA,MAAA,EAAA,GAAA,EAAA,EAAA,MAAA,GAAA,GAAA,EAAA,MAAA,EAAA,GAAA,CAAA,EAAA,MAAA,EAAA,GAAA,EAAA,IAAA,KAAA,GAAA,MAAA,EAAA,IAAA,EAAA,IAAA,MAAA,EAAA,KAAA,MAAA,SAAA,EAAA,EAAA,KAAA,EAAA,GAAA,MAAA,GAAA,EAAA,CAAA,EAAA,GAAA,EAAA,EAAA,QAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,MAAA,EAAA,GAAA,MAAA,CAAA,MAAA,EAAA,GAAA,EAAA,QAAA,EAAA,MAAA,GAAA,CAAA,CAAA,EAAA,OAxCY,EAAe,KAwC3B,QAAA,aAAA,EAvCM,IAAM,EAAgB,IAuC5B,QAAA,cAAA,EArCM,IACI,EACA,EACA,EAHA,EAAS,SAAS,cAAc,UAqC1C,QAAA,OAAA,EAAA,QAAA,QAAA,EAAA,QAAA,QAAA,EAAA,QAAA,OAAA,EAhCD,IAAM,EAAQ,WAAA,OAAA,OAAA,OAAA,OAAA,EAAA,WAgCb,OAAA,EAAA,KAAA,SAAA,GAAA,OAAA,EAAA,OAAA,KAAA,EA1BW,OALV,EAAO,MAAQ,EACf,EAAO,OAAS,EAChB,QAAA,QAAA,EAAU,EAAO,WAAW,MAC5B,SAAS,KAAK,aAAa,EAAQ,SAAS,KAAK,WAAW,IAElD,CAAA,GAAM,EAAN,EAAA,gBA0BX,KAAA,EAAA,OA1BC,QAAA,QAAA,EAAU,EAAA,OAEV,QAAA,OAAA,EAAS,IAAI,EAAJ,OAAW,EAAe,EAAG,EAAgB,IAEtD,EAAA,EAAA,eAsBD,CAAA,SAnBK,EAAO,WAAA,OAAA,OAAA,OAAA,OAAA,EAAA,WAmBZ,OAAA,EAAA,KAAA,SAAA,GAAA,OAlBC,EAAA,EAAA,mBACA,EAAA,EAAA,cACG,EAAO,WACR,EAAO,SAeV,CAAA,QAXK,EAAQ,SAAC,GAAe,OAAA,IAAI,QAAQ,SAAC,GAAY,OAAA,WAAW,EAAS,MAEvE,EAAQ,IAEN,EAAU,SAAV,IAAU,OAAA,OAAA,OAAA,OAAA,EAAA,WAOf,OAAA,EAAA,KAAA,SAAA,GAAA,OAAA,EAAA,OAAA,KAAA,EAJC,OAFA,IAEA,CAAA,EAAM,EAAM,IAIb,KAAA,EAAA,OAJC,EAAA,OACA,OAAO,sBAAsB,GAG9B,CAAA,SAAC,OAAA,OAAA,OAAA,EAAA,WAAD,OAAA,EAAA,KAAA,SAAA,GAAA,OAAA,EAAA,OAAA,KAAA,EACC,MAAA,CAAA,EAAM,KADP,KAAA,EAAA,OACC,EAAA,OAEA,IACA,OAAO,sBAAsB,GAJ9B,CAAA","file":"src.da4c7dea.js","sourceRoot":"..","sourcesContent":["import { context, player, sprites, WINDOW_HEIGHT, WINDOW_WIDTH } from '.'\n\nexport const drawBackground = () => {\n  for (let i = 0; i < WINDOW_WIDTH; i += 32) {\n    for (let j = 0; j < WINDOW_HEIGHT; j += 32) {\n      context.drawImage(sprites[43], i, j)\n    }\n  }\n}\n\n// const step = 8\n\nexport const drawPlayer = () => {\n  // let movement = [0, 0]\n\n  // if (pos < 8) {\n  //   movement = [0, step * pos]\n\n  //   if (pos === 0) {\n  //     sprite = sprites[3482]\n  //   } else if (pos % 2 === 1) {\n  //     sprite = sprites[3483]\n  //   } else {\n  //     sprite = sprites[3484]\n  //   }\n  // } else if (pos < 16) {\n  //   movement = [step * (pos % 8), 8 * step]\n\n  //   if (pos === 8) {\n  //     sprite = sprites[3488]\n  //   } else if (pos % 2 === 1) {\n  //     sprite = sprites[3489]\n  //   } else {\n  //     sprite = sprites[3490]\n  //   }\n  // } else if (pos < 24) {\n  //   movement = [8 * step, 8 * step - step * (pos % 8)]\n\n  //   if (pos === 12) {\n  //     sprite = sprites[3485]\n  //   } else if (pos % 2 === 1) {\n  //     sprite = sprites[3486]\n  //   } else {\n  //     sprite = sprites[3487]\n  //   }\n  // } else {\n  //   movement = [8 * step - step * (pos % 8), 0]\n\n  //   if (pos === 18) {\n  //     sprite = sprites[3491]\n  //   } else if (pos % 2 === 1) {\n  //     sprite = sprites[3492]\n  //   } else {\n  //     sprite = sprites[3493]\n  //   }\n  // }\n\n  context.drawImage(player.sprite, player.x, player.y)\n}\n","export const getGridDistance = (x1: number, y1: number, x2: number, y2: number) => {\n  return {\n    x: Math.floor(x1 / 32) - Math.floor(x2 / 32),\n    y: Math.floor(y1 / 32) - Math.floor(y2 / 32),\n  }\n}\n","import { sprites, WINDOW_HEIGHT, WINDOW_WIDTH } from '.'\n\nimport { getGridDistance } from './utils'\n\nexport enum Direction {\n  Up,\n  Down,\n  Left,\n  Right,\n}\n\nexport class Player {\n  x: number\n  y: number\n  walking: boolean = false\n  dancing: boolean = false\n  traveling: boolean = false\n  travelDestination = {\n    x: 0,\n    y: 0\n  }\n  sprite = sprites[3482]\n  level: number = 1\n  speed = Math.max(800 - this.level * 5, 200)\n\n  constructor(x: number, y: number) {\n    this.x = x\n    this.y = y\n  }\n\n  move = (direction: Direction) => {\n    if (this.walking) return\n\n    switch (direction) {\n      case Direction.Up:\n        if (this.y === 0) return\n\n        this.animateWalk('y', -1, 3485)\n\n        break\n      case Direction.Down:\n        if (this.y === WINDOW_HEIGHT - 32) return\n\n        this.animateWalk('y', 1, 3482)\n\n        break\n      case Direction.Left:\n        if (this.x === 0) return\n\n        this.animateWalk('x', -1, 3491)\n        break\n      case Direction.Right:\n        if (this.x === WINDOW_WIDTH - 32) return\n\n        this.animateWalk('x', 1, 3488)\n        break\n    }\n    this.walking = true\n\n    setTimeout(() => (this.walking = false), this.speed)\n  }\n\n  dance = (direction: Direction) => {\n    if (this.walking || this.dancing) return\n\n    switch (direction) {\n      case Direction.Up:\n        this.sprite = sprites[3485]\n        break\n      case Direction.Down:\n        this.sprite = sprites[3482]\n        break\n      case Direction.Left:\n        this.sprite = sprites[3491]\n        break\n      case Direction.Right:\n        this.sprite = sprites[3488]\n        break\n    }\n    this.dancing = true\n\n    setTimeout(() => (this.dancing = false), 50)\n  }\n\n  animateWalk = (property: 'x' | 'y', signal: -1 | 1, spriteBase: number) => {\n    const tick = 32 / 8\n\n    const spr = [sprites[spriteBase + 1], sprites[spriteBase + 2]]\n    let sprI = 0\n\n    const moveInterval = setInterval(() => (this[property] = this[property] + tick * signal), this.speed / 8)\n    const walkInterval = setInterval(() => {\n      if (sprI === spr.length) {\n        sprI = 0\n      }\n\n      this.sprite = spr[sprI]\n\n      sprI += 1\n    }, this.speed / 8)\n\n    setTimeout(() => {\n      clearInterval(moveInterval)\n      clearInterval(walkInterval)\n\n      this.sprite = sprites[spriteBase]\n    }, this.speed)\n  }\n\n  setTravelDestination = (x: number, y: number) => {\n    this.travelDestination = {x, y}\n  }\n\n  travel = () => {\n    const distanceToTarget = getGridDistance(this.travelDestination.x, this.travelDestination.y, this.x, this.y)\n    if(distanceToTarget.x === 0 && distanceToTarget.y === 0) {\n      this.traveling = false\n      return\n    } else if( distanceToTarget.x > 0) {\n      this.move(Direction.Right)\n    } else if( distanceToTarget.x < 0) {\n      this.move(Direction.Left)\n    } else if(distanceToTarget.y > 0) {\n      this.move(Direction.Down)\n    } else if(distanceToTarget.y < 0) {\n      this.move(Direction.Up)\n    }\n    return\n  }\n}\n","import { player } from '.'\nimport { Direction } from './Player'\n\nconst keysPressed: any = {}\n\nexport const inputsSetup = () => {\n  window.addEventListener('keydown', checkKeyPress, false)\n  window.addEventListener('keyup', removeKey, false)\n  window.addEventListener('click', checkClick, false);\n}\n\nconst removeKey = (e: any) => {\n  delete keysPressed[e.key]\n}\n\nexport const checkClick = (e: MouseEvent) => {\n  if(Math.floor(player.x/32) === Math.floor(e.clientX / 32) && Math.floor(player.y/32) === Math.floor(e.clientY / 32) ){\n    return\n  } else {\n    if(player.traveling) {\n      return\n    }\n    player.setTravelDestination(e.clientX, e.clientY);\n    player.traveling = true\n    player.travel()\n  }\n}\n\nexport const checkKeyPress = (e: KeyboardEvent) => {\n  keysPressed[e.key] = true\n  var code = e.key\n\n  if (keysPressed.Control) {\n    switch (code) {\n      case 'ArrowLeft':\n        player.dance(Direction.Left)\n        break\n      case 'ArrowUp':\n        player.dance(Direction.Up)\n        break\n      case 'ArrowRight':\n        player.dance(Direction.Right)\n        break\n      case 'ArrowDown':\n        player.dance(Direction.Down)\n        break\n    }\n    return\n  }\n\n  switch (code) {\n    case 'Escape':\n      if(player.traveling) {\n        player.traveling = false\n      }\n      break;\n    case 'ArrowLeft':\n      player.move(Direction.Left)\n      break\n    case 'ArrowUp':\n      player.move(Direction.Up)\n      break\n    case 'ArrowRight':\n      player.move(Direction.Right)\n      break\n    case 'ArrowDown':\n      player.move(Direction.Down)\n      break\n  }\n}\n","const loadSprite = async (id: number) =>\n  new Promise((resolve, reject) => {\n    const url = `./sprites/${id}.png`\n    const sprite = new Image()\n    sprite.src = url\n\n    sprite.onload = () => {\n      const tempCanvas = document.createElement('canvas')\n      tempCanvas.width = 32\n      tempCanvas.height = 32\n      const tempContext: any = tempCanvas.getContext('2d')\n\n      tempContext.drawImage(sprite, 0, 0)\n      const image = tempContext.getImageData(0, 0, 32, 32)\n\n      const { data } = image\n\n      for (let i = 0; i < data.length; i += 4) {\n        if (data[i + 3] !== 0) {\n          const r = data[i]\n          const g = data[i + 1]\n          const b = data[i + 2]\n\n          if (r === 255 && g === 0 && b === 255) {\n            data[i + 3] = 0\n          }\n        }\n      }\n\n      tempContext.putImageData(image, 0, 0)\n\n      const source = tempCanvas.toDataURL('image/png')\n      const transparentSprite = new Image()\n      transparentSprite.src = source\n\n      resolve(transparentSprite)\n    }\n\n    sprite.onerror = (error) => {\n      console.error('error', error)\n\n      reject(error)\n    }\n  })\n\nexport const loadSprites = async () => {\n  const ids = [43, 3482, 3483, 3484, 3485, 3486, 3487, 3488, 3489, 3490, 3491, 3492, 3493]\n\n  let sprites: { [key: number]: any } = {}\n  const spritesPromise = ids.map(async (id: number) => (sprites[id] = await loadSprite(id)))\n\n  await Promise.all(spritesPromise)\n\n  return sprites\n}\n","import { drawBackground, drawPlayer } from './draw'\nimport { checkKeyPress, inputsSetup } from './input'\nimport { Player } from './Player'\nimport { loadSprites } from './sprites'\n\nexport const WINDOW_WIDTH = 1280\nexport const WINDOW_HEIGHT = 640\n\nexport let canvas = document.createElement('canvas')\nexport let context: any\nexport let sprites: any\nexport let player: Player\n\nconst setup = async () => {\n  canvas.width = WINDOW_WIDTH\n  canvas.height = WINDOW_HEIGHT\n  context = canvas.getContext('2d')\n  document.body.insertBefore(canvas, document.body.childNodes[0])\n\n  sprites = await loadSprites()\n\n  player = new Player(WINDOW_WIDTH / 2, WINDOW_HEIGHT / 2)\n\n  inputsSetup()\n}\n\nconst loop = async () => {\n  drawBackground()\n  drawPlayer()\n  if(player.traveling) {\n    player.travel()\n  }\n}\n\nconst sleep = (ms: number) => new Promise((resolve) => setTimeout(resolve, ms))\n\nlet FRAME = 100\n\nconst theLoop = async () => {\n  loop()\n\n  await sleep(FRAME)\n  window.requestAnimationFrame(theLoop)\n}\n\n;(async () => {\n  await setup()\n\n  theLoop()\n  window.requestAnimationFrame(theLoop)\n})()\n"]}